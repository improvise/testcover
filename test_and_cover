#!/your/virtualenv/python/here

# Runs all unit tests in files matching (test_*.py) and checks branch coverage
# Only output when test failed or coverage incomplete

# Author: Steven Liao (dev+github@stevenliao.net)
# License: BSD (3-clause) license (See LICENSE)


import os
import subprocess
import sys


# absolute file path (String) for a specific config file; or None
config_file_loc = None


def check_test_files(config_file_loc):
    test_filenames = _get_test_filenames()
    if len(test_filenames) == 0:
        print "No tests found (tests need to be named test_*.py)."
        sys.exit(1)
    else:
        old_pyc_filenames = _get_pyc_filenames()
        num_problems = sum((1 for filename in test_filenames
            if not _tests_passed(filename)
            or not _coverage_complete(config_file_loc)))
        _remove_new_pyc_files(old_pyc_filenames)
        sys.exit(1 if num_problems > 0 else 0)


def _get_test_filenames():
    return [fname for fname in _cwd() if _is_unittest_file(fname)]


def _is_unittest_file(filename):
    return filename.startswith("test_") and filename.endswith(".py")


def _cwd():
    return os.listdir(".")


def _get_pyc_filenames():
    return [fname for fname in _cwd() if fname.endswith(".pyc")]


def _tests_passed(filename):
    try:
        subprocess.check_output(
            ["coverage", "run", "--branch", filename],
            stderr=subprocess.STDOUT
        )
        return True
    except subprocess.CalledProcessError as e:
        print e.output
        return False


def _coverage_complete(config_file_loc):
    assert config_file_loc is None or type(config_file_loc) is str
    if type(config_file_loc) is str:
        coverage_out = subprocess.check_output([
            "coverage", "report", "-m", "--rcfile="+config_file_loc])
    else:
        coverage_out = subprocess.check_output([
            "coverage", "report", "-m"])
    if _coverage_output_complete(coverage_out):
        return True
    else:
        return False


def _coverage_output_complete(coverage_out):
    found_uncovered_line = False
    missed_coverage = [line for line in coverage_out.split('\n')
        if _is_class(line) and not _is_line_covered(line)]
    if len(missed_coverage) == 0:
        return True
    else:
        title = coverage_out[:coverage_out.index('\n')]
        print title
        for line in missed_coverage:
            print line
        return False


def _is_class(coverage_out_line):
    return "%" in coverage_out_line


def _is_line_covered(coverage_out_line):
    return "100%" in coverage_out_line


def _remove_new_pyc_files(old_pyc_filenames):
    all_pyc_filenames = _get_pyc_filenames()
    new_pyc_filenames = list(set(all_pyc_filenames) - set(old_pyc_filenames))
    for pyc_filename in new_pyc_filenames:
        os.remove(pyc_filename)


check_test_files(config_file_loc)
